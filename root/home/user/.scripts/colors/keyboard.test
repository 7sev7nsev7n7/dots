# $1 will be direction to move (-1,0,+1)
# $2 will be mode to change to
# $3 will (optionally) be the color to set

# variable initialization
path=$(cd "$(dirname "$0")" && pwd) # script path
mode=$2
color=$3
echo $color
colors=('FF0000' 'FFFF00' '99FF00' '00FF00' '00FFFF' '0000FF' 'FF00FF' 'FFFFFF') # colors available on bluetooth keyboard

# variable checks
if [[ -z "$@" ]]; then 
	echo "no arguments passed"
	exit
fi

# getting desired mode
modes=('static' 'breathe' 'pulse' 'rainbow-cycle')
current=$(cat $path/current)
if [[ current+$1 -lt 0 || current+$1 -gt 3 ]] ; then # check if value of $1 is within accepted values
	new=$((($current+$1)%4))
	echo $new
else
	new=$(($current+$1))
fi
echo $new > $path/current
mode=${modes[$new]}
echo "changing mode to $mode"

# check if arguments are valid and change color in desired mode
case $mode in # if $mode is found in one of lists
	'static'|'breathe'|'pulse')
		if [[ -z $color ]]; then # if color argument is not found, use wallpaper color 
			# initializing values
			which=5 # which color to pick from wal output (recommended is 5)
			wal=$(sed "$which q;d" ~/.cache/wal/colors | sed -e 's/#//') # getting color from wal cache
			walR=${wal:0:2}; walG=${wal:2:2}; walB=${wal:4:2} # wal RGB values
			diffs=() # list of diference values between col and wal colors

			# for each color
			for col in ${colors[@]}; do
				# splitting hex values into RGB
				colR=${col:0:2}; colG=${col:2:2}; colB=${col:4:2} # col RGB values

				dR=$((0x$colR-0x$walR)); dG=$((0x$colG-0x$walG)); dB=$((0x$colB-0x$walB)) # diferences between values (col-wal)
				dR=${dR#-}; dG=${dG#-}; dB=${dB#-} # absolute values of diferences (col-wal)

				D=$((dR+dG+dB)) # total diference between col and wal
				diffs+=($D)
			done

			# find lowest value and use color associated to that position
			min=${diffs[0]}
			for i in ${diffs[@]}; do # get lowest value
				(( i < min )) && min=$i
			done
			for i in ${!diffs[@]}; do
				echo ${diffs[$i]} ${colors[$i]}
				if [[ "${diffs[$i]}" = $min ]]; then
					new=${colors[$i]}
				fi
			done
		else
			new=$color
		fi
		asusctl led-mode $mode -c $new
		echo 'done'
		;;
	'rainbow-cycle')
		asusctl led-mode $mode
		;;
	*)
		echo 'not found'
		;;
esac
